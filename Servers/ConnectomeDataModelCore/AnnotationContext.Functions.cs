// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections;
using System.Linq;
using Viking.DataModel.Annotation;
using System.Data;
using EntityFrameworkExtras.EFCore;
using Viking.DataModel.Annotation.UDT;

namespace Viking.DataModel.Annotation
{
    public partial class AnnotationContext
    {

        [DbFunction("LocationHasTag", "dbo")]
        public static bool? LocationHasTag(long? ID, string TagName)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        } 

        /*
        [DbFunction("NetworkChildStructureIDs", "dbo")]
        public IQueryable<NetworkChildStructureIDsResult> NetworkChildStructureIDs(integer_list IDs, int? Hops)
        {
            return FromExpression(() => NetworkChildStructureIDs(IDs, Hops));
        }

        [DbFunction("NetworkStructureIDs", "dbo")]
        public IQueryable<NetworkStructureIDsResult> NetworkStructureIDs(integer_list IDs, int? Hops)
        {
            return FromExpression(() => NetworkStructureIDs(IDs, Hops));
        }
        */

        [DbFunction("SectionLocationLinks", "dbo")]
        public IQueryable<SectionLocationLinksResult> SectionLocationLinks(double? Z)
        {
            return FromExpression(() => SectionLocationLinks(Z));
        }

        [DbFunction("SectionLocationLinksModifiedAfterDate", "dbo")]
        public IQueryable<SectionLocationLinksModifiedAfterDateResult> SectionLocationLinksModifiedAfterDate(double? Z, DateTime? QueryDate)
        {
            return FromExpression(() => SectionLocationLinksModifiedAfterDate(Z, QueryDate));
        }

        [DbFunction("SectionLocations", "dbo")]
        public IQueryable<SectionLocationsResult> SectionLocations(double? Z)
        {
            return FromExpression(() => SectionLocations(Z));
        }

        [DbFunction("SectionLocationsModifiedAfterDate", "dbo")]
        public IQueryable<SectionLocationsModifiedAfterDateResult> SectionLocationsModifiedAfterDate(double? Z, DateTime? QueryDate)
        {
            return FromExpression(() => SectionLocationsModifiedAfterDate(Z, QueryDate));
        }

        [DbFunction("StructureHasTag", "dbo")]
        public static bool? StructureHasTag(long? StructureID, string TagName)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("StructureLocationLinks", "dbo")]
        public IQueryable<StructureLocationLinksResult> StructureLocationLinks(long? StructureID)
        {
            return FromExpression(() => StructureLocationLinks(StructureID));
        }

        [DbFunction("TypeIDToName", "dbo")]
        public static string TypeIDToName(long? ID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
        /*
        [DbFunction("ufnCenterToCenterIntersectionPoint", "dbo")]
        public static object ufnCenterToCenterIntersectionPoint(object AShape, object BShape)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnCreateCircle", "dbo")]
        public static object ufnCreateCircle(object C, double? Radius)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
        

        [DbFunction("ufnDistance3D", "dbo")]
        public static double? ufnDistance3D(double? AX, double? AY, double? AZ, double? BX, double? BY, double? BZ)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnIntersectingCurveForCircles", "dbo")]
        public static object ufnIntersectingCurveForCircles(object S, object T, double? SeperateDistance)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
        
        [DbFunction("ufnLastNetworkModification", "dbo")]
        public static DateTime? ufnLastNetworkModification(integer_list IDs, int? Hops)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
*/
        [DbFunction("ufnLastStructureMorphologyModification", "dbo")]
        public static DateTime? ufnLastStructureMorphologyModification(long? ID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnLastStructureMorphologyModificationRecursive", "dbo")]
        public static DateTime? ufnLastStructureMorphologyModificationRecursive(long? ID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        /*
        [DbFunction("ufnLineFromAngleAndDistance", "dbo")]
        public static object ufnLineFromAngleAndDistance(double? Angle, double? distance, object offset)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnLineFromLinkedShapes", "dbo")]
        public static object ufnLineFromLinkedShapes(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnLineFromPoints", "dbo")]
        public static object ufnLineFromPoints(object P1, object P2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnLineFromThreePoints", "dbo")]
        public static object ufnLineFromThreePoints(object P1, object P2, object P3)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnLineThroughCircle", "dbo")]
        public static object ufnLineThroughCircle(object S, object T, bool? Perpendicular)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
        [DbFunction("ufnLinkedToLocations", "dbo")]
        public IQueryable<ufnLinkedToLocationsResult> ufnLinkedToLocations(integer_list SourceLocIDs)
        {
            return FromExpression(() => ufnLinkedToLocations(SourceLocIDs));
        }
        

        [DbFunction("ufnParallelLineForLinkedShapes", "dbo")]
        public static object ufnParallelLineForLinkedShapes(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnParallelLineThroughCircle", "dbo")]
        public static object ufnParallelLineThroughCircle(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnPerpendicularLineForLinkedShapes", "dbo")]
        public static object ufnPerpendicularLineForLinkedShapes(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnPerpendicularLineThroughCircle", "dbo")]
        public static object ufnPerpendicularLineThroughCircle(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnPerpendicularLineToIntersectionPointOfCircles", "dbo")]
        public static object ufnPerpendicularLineToIntersectionPointOfCircles(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnShapeDistance3D", "dbo")]
        public static double? ufnShapeDistance3D(object AShape, double? AZ, object BShape, double? BZ)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
        */
        [DbFunction("ufnStructureArea", "dbo")]
        public static double? ufnStructureArea(long? StructureID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnStructureVolume", "dbo")]
        public static double? ufnStructureVolume(long? StructureID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        /*
        [DbFunction("ufnTranslatePoint", "dbo")]
        public static object ufnTranslatePoint(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnTriangleArea", "dbo")]
        public static double? ufnTriangleArea(object P1, object P2, object P3)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnVector", "dbo")]
        public static object ufnVector(double? Angle, double? Magnitude)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufnWeightedMidpointBetweenCircles", "dbo")]
        public static object ufnWeightedMidpointBetweenCircles(object S, object T)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }
        */
        [DbFunction("XYScale", "dbo")]
        public static double? XYScale()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("XYScaleUnits", "dbo")]
        public static string XYScaleUnits()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ZScale", "dbo")]
        public static double? ZScale()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ZScaleUnits", "dbo")]
        public static string ZScaleUnits()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            //modelBuilder.Entity<NetworkChildStructureIDsResult>().HasNoKey();
            //modelBuilder.Entity<NetworkStructureIDsResult>().HasNoKey();
            modelBuilder.Entity<SectionLocationLinksResult>().HasNoKey();
            modelBuilder.Entity<SectionLocationLinksModifiedAfterDateResult>().HasNoKey();
            modelBuilder.Entity<SectionLocationsResult>().HasNoKey();
            modelBuilder.Entity<SectionLocationsModifiedAfterDateResult>().HasNoKey();
            modelBuilder.Entity<StructureLocationLinksResult>().HasNoKey();
            //modelBuilder.Entity<ufnLinkedToLocationsResult>().HasNoKey();
        }
    }
}
