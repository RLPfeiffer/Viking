// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Viking.DataModel.Annotation;

namespace Viking.DataModel.Annotation
{
    public partial class AnnotationContext
    {
        private AnnotationContextProcedures _procedures;

        public AnnotationContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AnnotationContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public AnnotationContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class AnnotationContextProcedures
    {
        private readonly AnnotationContext _context;

        public AnnotationContextProcedures(AnnotationContext context)
        {
            _context = context;
        }

        public virtual async Task<ApproximateStructureLocationResult[]> ApproximateStructureLocationAsync(int? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ApproximateStructureLocationResult>("EXEC @returnValue = [dbo].[ApproximateStructureLocation] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<ApproximateStructureLocationsResult[]> ApproximateStructureLocationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ApproximateStructureLocationsResult>("EXEC @returnValue = [dbo].[ApproximateStructureLocations]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<CountChildStructuresByTypeResult[]> CountChildStructuresByTypeAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CountChildStructuresByTypeResult>("EXEC @returnValue = [dbo].[CountChildStructuresByType] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<DeepDeleteStructureResult[]> DeepDeleteStructureAsync(long? DeleteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DeleteID",
                    Value = DeleteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DeepDeleteStructureResult>("EXEC @returnValue = [dbo].[DeepDeleteStructure] @DeleteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<MergeStructuresResult[]> MergeStructuresAsync(long? KeepStructureID, long? MergeStructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KeepStructureID",
                    Value = KeepStructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MergeStructureID",
                    Value = MergeStructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MergeStructuresResult>("EXEC @returnValue = [dbo].[MergeStructures] @KeepStructureID, @MergeStructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<RecursiveSelectChildStructureIDsResult[]> RecursiveSelectChildStructureIDsAsync(DataTable IDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RecursiveSelectChildStructureIDsResult>("EXEC @returnValue = [dbo].[RecursiveSelectChildStructureIDs] @IDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectAllStructureLocationLinksResult[]> SelectAllStructureLocationLinksAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectAllStructureLocationLinksResult>("EXEC @returnValue = [dbo].[SelectAllStructureLocationLinks]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectAllStructureLocationsResult[]> SelectAllStructureLocationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectAllStructureLocationsResult>("EXEC @returnValue = [dbo].[SelectAllStructureLocations]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectAllStructuresResult[]> SelectAllStructuresAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectAllStructuresResult>("EXEC @returnValue = [dbo].[SelectAllStructures]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectChildrenStructureLinksResult[]> SelectChildrenStructureLinksAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectChildrenStructureLinksResult>("EXEC @returnValue = [dbo].[SelectChildrenStructureLinks] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectChildStructureCenters3DResult[]> SelectChildStructureCenters3DAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectChildStructureCenters3DResult>("EXEC @returnValue = [dbo].[SelectChildStructureCenters3D]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectLastModifiedLocationByUsersResult[]> SelectLastModifiedLocationByUsersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectLastModifiedLocationByUsersResult>("EXEC @returnValue = [dbo].[SelectLastModifiedLocationByUsers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNearestChildAttachLocationCandidatesResult[]> SelectNearestChildAttachLocationCandidatesAsync(DataTable ParentStructureIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParentStructureIDs",
                    Value = ParentStructureIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNearestChildAttachLocationCandidatesResult>("EXEC @returnValue = [dbo].[SelectNearestChildAttachLocationCandidates] @ParentStructureIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNearestParentAttachCandidatesForLocationsResult[]> SelectNearestParentAttachCandidatesForLocationsAsync(DataTable ChildLocIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ChildLocIDs",
                    Value = ChildLocIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNearestParentAttachCandidatesForLocationsResult>("EXEC @returnValue = [dbo].[SelectNearestParentAttachCandidatesForLocations] @ChildLocIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNearestParentAttachLocationCandidatesResult[]> SelectNearestParentAttachLocationCandidatesAsync(DataTable ChildStructureIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ChildStructureIDs",
                    Value = ChildStructureIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNearestParentAttachLocationCandidatesResult>("EXEC @returnValue = [dbo].[SelectNearestParentAttachLocationCandidates] @ChildStructureIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkChildStructureIDsResult[]> SelectNetworkChildStructureIDsAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkChildStructureIDsResult>("EXEC @returnValue = [dbo].[SelectNetworkChildStructureIDs] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkChildStructuresResult[]> SelectNetworkChildStructuresAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkChildStructuresResult>("EXEC @returnValue = [dbo].[SelectNetworkChildStructures] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkChildStructureSpatialDataResult[]> SelectNetworkChildStructureSpatialDataAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkChildStructureSpatialDataResult>("EXEC @returnValue = [dbo].[SelectNetworkChildStructureSpatialData] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkDetailsResult[]> SelectNetworkDetailsAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkDetailsResult>("EXEC @returnValue = [dbo].[SelectNetworkDetails] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkStructureIDsResult[]> SelectNetworkStructureIDsAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkStructureIDsResult>("EXEC @returnValue = [dbo].[SelectNetworkStructureIDs] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkStructureLinksResult[]> SelectNetworkStructureLinksAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkStructureLinksResult>("EXEC @returnValue = [dbo].[SelectNetworkStructureLinks] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkStructuresResult[]> SelectNetworkStructuresAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkStructuresResult>("EXEC @returnValue = [dbo].[SelectNetworkStructures] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNetworkStructureSpatialDataResult[]> SelectNetworkStructureSpatialDataAsync(DataTable IDs, int? Hops, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDs",
                    Value = IDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[integer_list]",
                },
                new SqlParameter
                {
                    ParameterName = "Hops",
                    Value = Hops ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNetworkStructureSpatialDataResult>("EXEC @returnValue = [dbo].[SelectNetworkStructureSpatialData] @IDs, @Hops", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectNumConnectionsPerStructureResult[]> SelectNumConnectionsPerStructureAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectNumConnectionsPerStructureResult>("EXEC @returnValue = [dbo].[SelectNumConnectionsPerStructure]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectRootStructuresResult[]> SelectRootStructuresAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectRootStructuresResult>("EXEC @returnValue = [dbo].[SelectRootStructures]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionAnnotationsInMosaicBoundsResult[]> SelectSectionAnnotationsInMosaicBoundsAsync(double? Z, object BBox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionAnnotationsInMosaicBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionAnnotationsInMosaicBounds] @Z, @BBox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionAnnotationsInVolumeBoundsResult[]> SelectSectionAnnotationsInVolumeBoundsAsync(double? Z, object BBox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionAnnotationsInVolumeBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionAnnotationsInVolumeBounds] @Z, @BBox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionLocationLinksResult[]> SelectSectionLocationLinksAsync(double? Z, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionLocationLinksResult>("EXEC @returnValue = [dbo].[SelectSectionLocationLinks] @Z, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionLocationLinksInMosaicBoundsResult[]> SelectSectionLocationLinksInMosaicBoundsAsync(double? Z, object bbox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "bbox",
                    Value = bbox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionLocationLinksInMosaicBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionLocationLinksInMosaicBounds] @Z, @bbox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionLocationLinksInVolumeBoundsResult[]> SelectSectionLocationLinksInVolumeBoundsAsync(double? Z, object bbox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "bbox",
                    Value = bbox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionLocationLinksInVolumeBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionLocationLinksInVolumeBounds] @Z, @bbox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionLocationsAndLinksResult[]> SelectSectionLocationsAndLinksAsync(double? Z, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionLocationsAndLinksResult>("EXEC @returnValue = [dbo].[SelectSectionLocationsAndLinks] @Z, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionLocationsAndLinksInMosaicBoundsResult[]> SelectSectionLocationsAndLinksInMosaicBoundsAsync(double? Z, object BBox, double? Radius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "Radius",
                    Value = Radius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionLocationsAndLinksInMosaicBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionLocationsAndLinksInMosaicBounds] @Z, @BBox, @Radius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionLocationsAndLinksInVolumeBoundsResult[]> SelectSectionLocationsAndLinksInVolumeBoundsAsync(double? Z, object BBox, double? Radius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "Radius",
                    Value = Radius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionLocationsAndLinksInVolumeBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionLocationsAndLinksInVolumeBounds] @Z, @BBox, @Radius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionStructuresResult[]> SelectSectionStructuresAsync(double? Z, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionStructuresResult>("EXEC @returnValue = [dbo].[SelectSectionStructures] @Z, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionStructuresAndLinksResult[]> SelectSectionStructuresAndLinksAsync(double? Z, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionStructuresAndLinksResult>("EXEC @returnValue = [dbo].[SelectSectionStructuresAndLinks] @Z, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionStructuresAndLinksInMosaicBoundsResult[]> SelectSectionStructuresAndLinksInMosaicBoundsAsync(double? Z, object BBox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionStructuresAndLinksInMosaicBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionStructuresAndLinksInMosaicBounds] @Z, @BBox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionStructuresAndLinksInVolumeBoundsResult[]> SelectSectionStructuresAndLinksInVolumeBoundsAsync(double? Z, object BBox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionStructuresAndLinksInVolumeBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionStructuresAndLinksInVolumeBounds] @Z, @BBox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionStructuresInMosaicBoundsResult[]> SelectSectionStructuresInMosaicBoundsAsync(double? Z, object BBox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionStructuresInMosaicBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionStructuresInMosaicBounds] @Z, @BBox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectSectionStructuresInVolumeBoundsResult[]> SelectSectionStructuresInVolumeBoundsAsync(double? Z, object BBox, double? MinRadius, DateTime? QueryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Z",
                    Value = Z ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "BBox",
                    Value = BBox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Variant,
                },
                new SqlParameter
                {
                    ParameterName = "MinRadius",
                    Value = MinRadius ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "QueryDate",
                    Value = QueryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectSectionStructuresInVolumeBoundsResult>("EXEC @returnValue = [dbo].[SelectSectionStructuresInVolumeBounds] @Z, @BBox, @MinRadius, @QueryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureResult[]> SelectStructureAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureResult>("EXEC @returnValue = [dbo].[SelectStructure] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureChangeLogResult[]> SelectStructureChangeLogAsync(long? structure_ID, DateTime? begin_time, DateTime? end_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "structure_ID",
                    Value = structure_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "begin_time",
                    Value = begin_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_time",
                    Value = end_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureChangeLogResult>("EXEC @returnValue = [dbo].[SelectStructureChangeLog] @structure_ID, @begin_time, @end_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureLabelsResult[]> SelectStructureLabelsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureLabelsResult>("EXEC @returnValue = [dbo].[SelectStructureLabels]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureLocationChangeLogResult[]> SelectStructureLocationChangeLogAsync(long? structure_ID, DateTime? begin_time, DateTime? end_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "structure_ID",
                    Value = structure_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "begin_time",
                    Value = begin_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_time",
                    Value = end_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureLocationChangeLogResult>("EXEC @returnValue = [dbo].[SelectStructureLocationChangeLog] @structure_ID, @begin_time, @end_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureLocationLinksResult[]> SelectStructureLocationLinksAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureLocationLinksResult>("EXEC @returnValue = [dbo].[SelectStructureLocationLinks] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureLocationLinksNoChildrenResult[]> SelectStructureLocationLinksNoChildrenAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureLocationLinksNoChildrenResult>("EXEC @returnValue = [dbo].[SelectStructureLocationLinksNoChildren] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureLocationsResult[]> SelectStructureLocationsAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureLocationsResult>("EXEC @returnValue = [dbo].[SelectStructureLocations] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructureLocationsAndLinksResult[]> SelectStructureLocationsAndLinksAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructureLocationsAndLinksResult>("EXEC @returnValue = [dbo].[SelectStructureLocationsAndLinks] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructuresAndLinksResult[]> SelectStructuresAndLinksAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructuresAndLinksResult>("EXEC @returnValue = [dbo].[SelectStructuresAndLinks]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectStructuresLinkedViaChildrenResult[]> SelectStructuresLinkedViaChildrenAsync(long? ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectStructuresLinkedViaChildrenResult>("EXEC @returnValue = [dbo].[SelectStructuresLinkedViaChildren] @ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectUnfinishedStructureBranchesResult[]> SelectUnfinishedStructureBranchesAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectUnfinishedStructureBranchesResult>("EXEC @returnValue = [dbo].[SelectUnfinishedStructureBranches] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SelectUnfinishedStructureBranchesWithPositionResult[]> SelectUnfinishedStructureBranchesWithPositionAsync(long? StructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectUnfinishedStructureBranchesWithPositionResult>("EXEC @returnValue = [dbo].[SelectUnfinishedStructureBranchesWithPosition] @StructureID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SplitStructureResult[]> SplitStructureAsync(long? LocationIDOfSplitStructure, OutputParameter<long?> SplitStructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterSplitStructureID = new SqlParameter
            {
                ParameterName = "SplitStructureID",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LocationIDOfSplitStructure",
                    Value = LocationIDOfSplitStructure ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterSplitStructureID,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SplitStructureResult>("EXEC @returnValue = [dbo].[SplitStructure] @LocationIDOfSplitStructure, @SplitStructureID OUTPUT", sqlParameters, cancellationToken);

            SplitStructureID.SetValue(parameterSplitStructureID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<SplitStructureAtLocationLinkResult[]> SplitStructureAtLocationLinkAsync(long? LocationIDOfKeepStructure, long? LocationIDOfSplitStructure, OutputParameter<long?> SplitStructureID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterSplitStructureID = new SqlParameter
            {
                ParameterName = "SplitStructureID",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LocationIDOfKeepStructure",
                    Value = LocationIDOfKeepStructure ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationIDOfSplitStructure",
                    Value = LocationIDOfSplitStructure ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterSplitStructureID,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SplitStructureAtLocationLinkResult>("EXEC @returnValue = [dbo].[SplitStructureAtLocationLink] @LocationIDOfKeepStructure, @LocationIDOfSplitStructure, @SplitStructureID OUTPUT", sqlParameters, cancellationToken);

            SplitStructureID.SetValue(parameterSplitStructureID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateStructureTypeAsync(long? StructureID, long? TypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StructureID",
                    Value = StructureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TypeID",
                    Value = TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateStructureType] @StructureID, @TypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
