// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Viking.DataModel.Annotation;

namespace Viking.DataModel.Annotation
{
    [DbContext(typeof(AnnotationContext))]
    [Migration("20220408222106_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Viking.DataModel.Annotation.DeletedLocation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<DateTime>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeletedOn" }, "DeletedOn")
                        .HasFillFactor(90);

                    b.ToTable("DeletedLocations");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit")
                        .HasComment("Defines whether Vertices form a closed figure (The last vertex connects to the first)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("Date the location was created");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("Date the location was last modified");

                    b.Property<Geometry>("MosaicShape")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<bool>("OffEdge")
                        .HasColumnType("bit")
                        .HasComment("This bit is set if the structure leaves the volume at this location");

                    b.Property<byte[]>("Overlay")
                        .HasColumnType("varbinary(max)")
                        .HasComment("An image centered on X,Y,Z which specifies which surrounding pixels are part of location");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentID")
                        .HasComment("Structure which we belong to");

                    b.Property<double>("Radius")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(case [MosaicShape].[STDimension]() when (0) then (0) when (1) then [MosaicShape].[STLength]()/(2.0) when (2) then sqrt([MosaicShape].[STArea]()/pi())  end)", true)
                        .HasComment("Radius, calculated column needed for backwards compatability");

                    b.Property<string>("Tags")
                        .HasColumnType("xml");

                    b.Property<bool>("Terminal")
                        .HasColumnType("bit")
                        .HasComment("Set to true if this location is the edge of a structure and cannot be extended.");

                    b.Property<short>("TypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))")
                        .HasComment("0 = Point, 1 = Circle, 2=Ellipse, 3 =PolyLine, 4=Polygon");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasDefaultValueSql("(N'')")
                        .HasComment("Last username to modify the row");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Geometry>("VolumeShape")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<double>("VolumeX")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(isnull([VolumeShape].[STCentroid]().STX,isnull([VolumeShape].[STX],isnull([VolumeShape].[STEnvelope]().STCentroid().STX,(0)))))", true);

                    b.Property<double>("VolumeY")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(isnull([VolumeShape].[STCentroid]().STY,isnull([VolumeShape].[STY],isnull([VolumeShape].[STEnvelope]().STCentroid().STY,(0)))))", true);

                    b.Property<double?>("Width")
                        .HasColumnType("float")
                        .HasComment("Width used for line annotation types");

                    b.Property<double>("X")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(isnull([MosaicShape].[STCentroid]().STX,isnull([MosaicShape].[STX],(0))))", true);

                    b.Property<double>("Y")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(isnull([MosaicShape].[STCentroid]().STY,isnull([MosaicShape].[STY],(0))))", true);

                    b.Property<long>("Z")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LastModified" }, "LastModified")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "ParentId" }, "ParentID")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "Z" }, "Z");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.LocationLink", b =>
                {
                    b.Property<long>("A")
                        .HasColumnType("bigint")
                        .HasComment("The convention is that A is always less than B");

                    b.Property<long>("B")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("Row Creation Date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasDefaultValueSql("(N'')")
                        .HasComment("Last username to modify the row");

                    b.HasKey("A", "B");

                    b.HasIndex(new[] { "A", "B" }, "LocationLink_A_B_Username_Created");

                    b.HasIndex(new[] { "B", "A" }, "LocationLink_B_A_Username_Created");

                    b.HasIndex(new[] { "A" }, "a")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "B" }, "b")
                        .HasFillFactor(90);

                    b.ToTable("LocationLink");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.PermittedStructureLink", b =>
                {
                    b.Property<long>("SourceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourceTypeID");

                    b.Property<long>("TargetTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("TargetTypeID");

                    b.Property<bool>("Bidirectional")
                        .HasColumnType("bit");

                    b.HasKey("SourceTypeId", "TargetTypeId");

                    b.HasIndex("TargetTypeId");

                    b.HasIndex(new[] { "SourceTypeId", "TargetTypeId" }, "PermittedStructureLink_source_target_unique")
                        .IsUnique();

                    b.ToTable("PermittedStructureLink");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.SectionLocationLinksModifiedAfterDateResult", b =>
                {
                    b.Property<long>("A")
                        .HasColumnType("bigint");

                    b.Property<long>("B")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(null);
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.SectionLocationLinksResult", b =>
                {
                    b.Property<long>("A")
                        .HasColumnType("bigint");

                    b.Property<long>("B")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(null);
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.SectionLocationsModifiedAfterDateResult", b =>
                {
                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Geometry>("MosaicShape")
                        .HasColumnType("geography");

                    b.Property<bool>("OffEdge")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Overlay")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("ParentID")
                        .HasColumnType("bigint");

                    b.Property<double?>("Radius")
                        .HasColumnType("float");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Terminal")
                        .HasColumnType("bit");

                    b.Property<short>("TypeCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .HasColumnType("varbinary(max)");

                    b.Property<Geometry>("VolumeShape")
                        .HasColumnType("geography");

                    b.Property<double>("VolumeX")
                        .HasColumnType("float");

                    b.Property<double>("VolumeY")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.Property<long>("Z")
                        .HasColumnType("bigint");

                    b.ToTable(null);
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.SectionLocationsResult", b =>
                {
                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Geometry>("MosaicShape")
                        .HasColumnType("geography");

                    b.Property<bool>("OffEdge")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Overlay")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("ParentID")
                        .HasColumnType("bigint");

                    b.Property<double?>("Radius")
                        .HasColumnType("float");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Terminal")
                        .HasColumnType("bit");

                    b.Property<short>("TypeCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .HasColumnType("varbinary(max)");

                    b.Property<Geometry>("VolumeShape")
                        .HasColumnType("geography");

                    b.Property<double>("VolumeX")
                        .HasColumnType("float");

                    b.Property<double>("VolumeY")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.Property<long>("Z")
                        .HasColumnType("bigint");

                    b.ToTable(null);
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.Structure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Confidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.5))")
                        .HasComment("How certain is it that the structure is what we say it is");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("Date the structure was created");

                    b.Property<string>("Label")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasComment("Additional Label for structure in UI");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentID")
                        .HasComment("If the structure is contained in a larger structure (Synapse for a cell) this index contains the index of the parent");

                    b.Property<string>("Tags")
                        .HasColumnType("xml")
                        .HasComment("Strings seperated by semicolins");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("TypeID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasDefaultValueSql("(N'')")
                        .HasComment("Last username to modify the row");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("Records last write time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LastModified" }, "LastModified")
                        .HasDatabaseName("LastModified1")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "ParentId" }, "ParentID")
                        .HasDatabaseName("ParentID1")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "ParentId", "Id" }, "Structure_ParentID_ID");

                    b.HasIndex(new[] { "TypeId" }, "TypeID")
                        .HasFillFactor(90);

                    b.ToTable("Structure");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureLink", b =>
                {
                    b.Property<bool>("Bidirectional")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("Row Creation Date");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourceID");

                    b.Property<string>("Tags")
                        .HasColumnType("xml");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("TargetID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasDefaultValueSql("(N'')")
                        .HasComment("Last username to modify the row");

                    b.HasIndex(new[] { "SourceId" }, "SourceID")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "TargetId" }, "TargetID")
                        .HasFillFactor(90);

                    b.HasIndex(new[] { "SourceId", "TargetId" }, "source_target_unique")
                        .IsUnique();

                    b.ToTable("StructureLink");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureLocationLinksResult", b =>
                {
                    b.Property<long>("A")
                        .HasColumnType("bigint");

                    b.Property<long>("B")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(null);
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureSpatialCache", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<Geometry>("BoundingRect")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<Geometry>("ConvexHull")
                        .HasColumnType("geometry");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxDimension")
                        .HasColumnType("int");

                    b.Property<double>("MaxZ")
                        .HasColumnType("float");

                    b.Property<double>("MinZ")
                        .HasColumnType("float");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("StructureSpatialCache");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("char(64)")
                        .IsFixedLength(true)
                        .HasComment("Name of template");

                    b.Property<string>("StructureTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The tags to create with the new structure type");

                    b.Property<long>("StructureTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("StructureTypeID")
                        .HasComment("The structure type which is created when using the template");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("StructureTypeId");

                    b.ToTable("StructureTemplates");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Abstract")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .HasDefaultValueSql("(N'No Code')")
                        .IsFixedLength(true)
                        .HasComment("Code used to identify these items in the UI");

                    b.Property<int>("Color")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(0xFFFFFF)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("HotKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('\\0')")
                        .IsFixedLength(true)
                        .HasComment("Hotkey used to create a structure of this type");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("MarkupType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .HasDefaultValueSql("(N'Point')")
                        .IsFixedLength(true)
                        .HasComment("Point,Line,Poly");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nchar(128)")
                        .IsFixedLength(true);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentID");

                    b.Property<string>("StructureTags")
                        .HasColumnType("xml");

                    b.Property<string>("Tags")
                        .HasColumnType("xml")
                        .HasComment("Strings seperated by semicolins");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasDefaultValueSql("(N'')")
                        .HasComment("Last username to modify the row");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "ParentID")
                        .HasDatabaseName("ParentID2")
                        .HasFillFactor(90);

                    b.ToTable("StructureType");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.UserActivity", b =>
                {
                    b.Property<DateTime?>("LastActiveDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalModifications")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.ToView("UserActivity");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.Location", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.Structure", "Parent")
                        .WithMany("Locations")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Location_StructureBase1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.LocationLink", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.Location", "ANavigation")
                        .WithMany("LocationLinkANavigations")
                        .HasForeignKey("A")
                        .HasConstraintName("FK_LocationLink_Location")
                        .IsRequired();

                    b.HasOne("Viking.DataModel.Annotation.Location", "BNavigation")
                        .WithMany("LocationLinkBNavigations")
                        .HasForeignKey("B")
                        .HasConstraintName("FK_LocationLink_Location1")
                        .IsRequired();

                    b.Navigation("ANavigation");

                    b.Navigation("BNavigation");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.PermittedStructureLink", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.StructureType", "SourceType")
                        .WithMany("PermittedStructureLinkSourceTypes")
                        .HasForeignKey("SourceTypeId")
                        .HasConstraintName("FK_PermittedStructureLink_SourceType")
                        .IsRequired();

                    b.HasOne("Viking.DataModel.Annotation.StructureType", "TargetType")
                        .WithMany("PermittedStructureLinkTargetTypes")
                        .HasForeignKey("TargetTypeId")
                        .HasConstraintName("FK_PermittedStructureLink_TargetType")
                        .IsRequired();

                    b.Navigation("SourceType");

                    b.Navigation("TargetType");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.Structure", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.Structure", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Structure_Structure");

                    b.HasOne("Viking.DataModel.Annotation.StructureType", "Type")
                        .WithMany("Structures")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_StructureBase_StructureType")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureLink", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.Structure", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .HasConstraintName("FK_StructureLinkSource_StructureBaseID")
                        .IsRequired();

                    b.HasOne("Viking.DataModel.Annotation.Structure", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .HasConstraintName("FK_StructureLinkTarget_StructureBaseID")
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureSpatialCache", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.Structure", "IdNavigation")
                        .WithOne("StructureSpatialCache")
                        .HasForeignKey("Viking.DataModel.Annotation.StructureSpatialCache", "Id")
                        .HasConstraintName("FK__Structure__LastM__1F959DAB")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureTemplate", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.StructureType", "StructureType")
                        .WithMany("StructureTemplates")
                        .HasForeignKey("StructureTypeId")
                        .HasConstraintName("FK_StructureTemplates_StructureType")
                        .IsRequired();

                    b.Navigation("StructureType");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureType", b =>
                {
                    b.HasOne("Viking.DataModel.Annotation.StructureType", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_StructureType_StructureType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.Location", b =>
                {
                    b.Navigation("LocationLinkANavigations");

                    b.Navigation("LocationLinkBNavigations");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.Structure", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Locations");

                    b.Navigation("StructureSpatialCache");
                });

            modelBuilder.Entity("Viking.DataModel.Annotation.StructureType", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("PermittedStructureLinkSourceTypes");

                    b.Navigation("PermittedStructureLinkTargetTypes");

                    b.Navigation("Structures");

                    b.Navigation("StructureTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
