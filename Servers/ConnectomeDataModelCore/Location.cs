// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

#nullable disable

namespace Viking.DataModel.Annotation
{
    [Table("Location")]
    [Index(nameof(MosaicShape), Name = "MosaicShape_Index")]
    [Index(nameof(VolumeShape), Name = "VolumeShape_Index")]
    [Index(nameof(Z), Name = "Z")]
    public partial class Location
    {
        public Location()
        {
            LocationLinkANavigations = new HashSet<LocationLink>();
            LocationLinkBNavigations = new HashSet<LocationLink>();
        }

        [Key]
        [Column("ID")]
        public long Id { get; set; }
        /// <summary>
        /// Structure which we belong to
        /// </summary>
        [Column("ParentID")]
        public long ParentId { get; set; }
        public long Z { get; set; }
        /// <summary>
        /// Defines whether Vertices form a closed figure (The last vertex connects to the first)
        /// </summary>
        public bool Closed { get; set; }
        [Required]
        public byte[] Version { get; set; }
        /// <summary>
        /// An image centered on X,Y,Z which specifies which surrounding pixels are part of location
        /// </summary>
        public byte[] Overlay { get; set; }
        [Column(TypeName = "xml")]
        public string Tags { get; set; }
        /// <summary>
        /// Set to true if this location is the edge of a structure and cannot be extended.
        /// </summary>
        public bool Terminal { get; set; }
        /// <summary>
        /// This bit is set if the structure leaves the volume at this location
        /// </summary>
        public bool OffEdge { get; set; }
        /// <summary>
        /// 0 = Point, 1 = Circle, 2=Ellipse, 3 =PolyLine, 4=Polygon
        /// </summary>
        public short TypeCode { get; set; }
        /// <summary>
        /// Date the location was last modified
        /// </summary>
        [Column(TypeName = "datetime")]
        public DateTime LastModified { get; set; }
        /// <summary>
        /// Date the location was created
        /// </summary>
        [Column(TypeName = "datetime")]
        public DateTime Created { get; set; }
        /// <summary>
        /// Last username to modify the row
        /// </summary>
        [Required]
        [StringLength(254)]
        public string Username { get; set; }
        [Required]
        [Column(TypeName = "geometry")]
        public Geometry MosaicShape { get; set; }
        [Required]
        [Column(TypeName = "geometry")]
        public Geometry VolumeShape { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public double VolumeX { get; set; }
        public double VolumeY { get; set; }
        /// <summary>
        /// Width used for line annotation types
        /// </summary>
        public double? Width { get; set; }
        /// <summary>
        /// Radius, calculated column needed for backwards compatability
        /// </summary>
        public double Radius { get; set; }

        [ForeignKey(nameof(ParentId))]
        [InverseProperty(nameof(Structure.Locations))]
        public virtual Structure Parent { get; set; }
        [InverseProperty(nameof(LocationLink.ANavigation))]
        public virtual ICollection<LocationLink> LocationLinkANavigations { get; set; }
        [InverseProperty(nameof(LocationLink.BNavigation))]
        public virtual ICollection<LocationLink> LocationLinkBNavigations { get; set; }
    }
}