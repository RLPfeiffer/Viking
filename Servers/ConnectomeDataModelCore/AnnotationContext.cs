// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Viking.DataModel.Annotation
{
    public partial class AnnotationContext : DbContext
    {
        public AnnotationContext()
        {
        }

        public AnnotationContext(DbContextOptions<AnnotationContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DeletedLocation> DeletedLocations { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationLink> LocationLinks { get; set; }
        public virtual DbSet<PermittedStructureLink> PermittedStructureLinks { get; set; }
        public virtual DbSet<Structure> Structures { get; set; }
        public virtual DbSet<StructureLink> StructureLinks { get; set; }
        public virtual DbSet<StructureSpatialCache> StructureSpatialCaches { get; set; }
        public virtual DbSet<StructureTemplate> StructureTemplates { get; set; }
        public virtual DbSet<StructureType> StructureTypes { get; set; }
        public virtual DbSet<UserActivity> UserActivities { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=OpR-Marc-DB2;Initial Catalog=Test;Integrated Security=True;Persist Security Info=False;Pooling=False;Multiple Active Result Sets=False;Application Name=\"Microsoft SQL Server Data Tools, SQL Server Object Explorer\"", x => x.UseNetTopologySuite());
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<DeletedLocation>(entity =>
            {
                entity.HasIndex(e => e.DeletedOn, "DeletedOn")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DeletedOn).HasDefaultValueSql("(getutcdate())");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasIndex(e => e.LastModified, "LastModified")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentId, "ParentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Closed).HasComment("Defines whether Vertices form a closed figure (The last vertex connects to the first)");

                entity.Property(e => e.Created)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasComment("Date the location was created");

                entity.Property(e => e.LastModified)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasComment("Date the location was last modified");

                entity.Property(e => e.OffEdge).HasComment("This bit is set if the structure leaves the volume at this location");

                entity.Property(e => e.Overlay).HasComment("An image centered on X,Y,Z which specifies which surrounding pixels are part of location");

                entity.Property(e => e.ParentId).HasComment("Structure which we belong to");

                entity.Property(e => e.Radius)
                    .HasComputedColumnSql("(case [MosaicShape].[STDimension]() when (0) then (0) when (1) then [MosaicShape].[STLength]()/(2.0) when (2) then sqrt([MosaicShape].[STArea]()/pi())  end)", true)
                    .HasComment("Radius, calculated column needed for backwards compatability");

                entity.Property(e => e.Terminal).HasComment("Set to true if this location is the edge of a structure and cannot be extended.");

                entity.Property(e => e.TypeCode)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 = Point, 1 = Circle, 2=Ellipse, 3 =PolyLine, 4=Polygon");

                entity.Property(e => e.Username)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("Last username to modify the row");

                entity.Property(e => e.Version)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VolumeX).HasComputedColumnSql("(isnull([VolumeShape].[STCentroid]().STX,isnull([VolumeShape].[STX],isnull([VolumeShape].[STEnvelope]().STCentroid().STX,(0)))))", true);

                entity.Property(e => e.VolumeY).HasComputedColumnSql("(isnull([VolumeShape].[STCentroid]().STY,isnull([VolumeShape].[STY],isnull([VolumeShape].[STEnvelope]().STCentroid().STY,(0)))))", true);

                entity.Property(e => e.Width).HasComment("Width used for line annotation types");

                entity.Property(e => e.X).HasComputedColumnSql("(isnull([MosaicShape].[STCentroid]().STX,isnull([MosaicShape].[STX],(0))))", true);

                entity.Property(e => e.Y).HasComputedColumnSql("(isnull([MosaicShape].[STCentroid]().STY,isnull([MosaicShape].[STY],(0))))", true);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Location_StructureBase1");
            });

            modelBuilder.Entity<LocationLink>(entity =>
            {
                entity.HasKey(e => new { e.A, e.B });

                entity.HasIndex(e => e.A, "a")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.B, "b")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.A).HasComment("The convention is that A is always less than B");

                entity.Property(e => e.Created)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasComment("Row Creation Date");

                entity.Property(e => e.Username)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("Last username to modify the row");

                entity.HasOne(d => d.ANavigation)
                    .WithMany(p => p.LocationLinkANavigations)
                    .HasForeignKey(d => d.A)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationLink_Location");

                entity.HasOne(d => d.BNavigation)
                    .WithMany(p => p.LocationLinkBNavigations)
                    .HasForeignKey(d => d.B)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationLink_Location1");
            });

            modelBuilder.Entity<PermittedStructureLink>(entity =>
            {
                entity.HasKey(e => new { e.SourceTypeId, e.TargetTypeId });

                entity.HasOne(d => d.SourceType)
                    .WithMany(p => p.PermittedStructureLinkSourceTypes)
                    .HasForeignKey(d => d.SourceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermittedStructureLink_SourceType");

                entity.HasOne(d => d.TargetType)
                    .WithMany(p => p.PermittedStructureLinkTargetTypes)
                    .HasForeignKey(d => d.TargetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermittedStructureLink_TargetType");
            });

            modelBuilder.Entity<Structure>(entity =>
            {
                entity.HasIndex(e => e.LastModified, "LastModified")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentId, "ParentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TypeId, "TypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Confidence)
                    .HasDefaultValueSql("((0.5))")
                    .HasComment("How certain is it that the structure is what we say it is");

                entity.Property(e => e.Created)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasComment("Date the structure was created");

                entity.Property(e => e.Label)
                    .IsUnicode(false)
                    .HasComment("Additional Label for structure in UI");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.ParentId).HasComment("If the structure is contained in a larger structure (Synapse for a cell) this index contains the index of the parent");

                entity.Property(e => e.Tags).HasComment("Strings seperated by semicolins");

                entity.Property(e => e.Username)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("Last username to modify the row");

                entity.Property(e => e.Version)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Records last write time");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Structure_Structure");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Structures)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StructureBase_StructureType");
            });

            modelBuilder.Entity<StructureLink>(entity =>
            {
                entity.HasIndex(e => e.SourceId, "SourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TargetId, "TargetID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Created)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasComment("Row Creation Date");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Username)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("Last username to modify the row");

                entity.HasOne(d => d.Source)
                    .WithMany()
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StructureLinkSource_StructureBaseID");

                entity.HasOne(d => d.Target)
                    .WithMany()
                    .HasForeignKey(d => d.TargetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StructureLinkTarget_StructureBaseID");
            });

            modelBuilder.Entity<StructureSpatialCache>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StructureSpatialCache)
                    .HasForeignKey<StructureSpatialCache>(d => d.Id)
                    .HasConstraintName("FK__Structure__LastM__1F959DAB");
            });

            modelBuilder.Entity<StructureTemplate>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Name of template");

                entity.Property(e => e.StructureTags).HasComment("The tags to create with the new structure type");

                entity.Property(e => e.StructureTypeId).HasComment("The structure type which is created when using the template");

                entity.Property(e => e.Version)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.StructureType)
                    .WithMany(p => p.StructureTemplates)
                    .HasForeignKey(d => d.StructureTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StructureTemplates_StructureType");
            });

            modelBuilder.Entity<StructureType>(entity =>
            {
                entity.HasIndex(e => e.ParentId, "ParentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Code)
                    .HasDefaultValueSql("(N'No Code')")
                    .IsFixedLength(true)
                    .HasComment("Code used to identify these items in the UI");

                entity.Property(e => e.Color).HasDefaultValueSql("(0xFFFFFF)");

                entity.Property(e => e.Created).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.HotKey)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('\\0')")
                    .IsFixedLength(true)
                    .HasComment("Hotkey used to create a structure of this type");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.MarkupType)
                    .HasDefaultValueSql("(N'Point')")
                    .IsFixedLength(true)
                    .HasComment("Point,Line,Poly");

                entity.Property(e => e.Name).IsFixedLength(true);

                entity.Property(e => e.Tags).HasComment("Strings seperated by semicolins");

                entity.Property(e => e.Username)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("Last username to modify the row");

                entity.Property(e => e.Version)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_StructureType_StructureType");
            });

            modelBuilder.Entity<UserActivity>(entity =>
            {
                entity.ToView("UserActivity");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}